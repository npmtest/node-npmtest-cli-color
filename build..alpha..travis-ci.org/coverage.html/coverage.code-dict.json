{"/home/travis/build/npmtest/node-npmtest-cli-color/test.js":"/* istanbul instrument in package npmtest_cli_color */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-color/lib.npmtest_cli_color.js":"/* istanbul instrument in package npmtest_cli_color */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cli_color = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cli_color = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-color/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cli-color && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cli_color */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cli_color\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cli_color.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cli_color.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cli_color.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cli_color.__dirname +\n                    '/lib.npmtest_cli_color.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/index.js":"'use strict';\n\nvar d = require('d');\n\nmodule.exports = Object.defineProperties(require('./bare'), {\n\twindowSize: d(require('./window-size')),\n\terase: d(require('./erase')),\n\tmove: d(require('./move')),\n\tbeep: d(require('./beep')),\n\tcolumns: d(require('./columns')),\n\tstrip: d(require('./strip')),\n\tgetStrippedLength: d(require('./get-stripped-length')),\n\tslice: d(require('./slice')),\n\tthrobber: d(require('./throbber')),\n\treset: d(require('./reset')),\n\tart: d(require('./art'))\n});\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/bare.js":"'use strict';\n\nvar d              = require('d')\n  , assign         = require('es5-ext/object/assign')\n  , forEach        = require('es5-ext/object/for-each')\n  , map            = require('es5-ext/object/map')\n  , primitiveSet   = require('es5-ext/object/primitive-set')\n  , setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , memoize        = require('memoizee')\n  , memoizeMethods = require('memoizee/methods')\n\n  , sgr = require('./lib/sgr')\n  , mods = sgr.mods\n\n  , join = Array.prototype.join, defineProperty = Object.defineProperty\n  , max = Math.max, min = Math.min\n  , variantModes = primitiveSet('_fg', '_bg')\n  , xtermMatch, getFn;\n\n// Some use cli-color as: console.log(clc.red('Error!'));\n// Which is inefficient as on each call it configures new clc object\n// with memoization we reuse once created object\nvar memoized = memoize(function (scope, mod) {\n\treturn defineProperty(getFn(), '_cliColorData', d(assign({}, scope._cliColorData, mod)));\n});\n\nvar proto = Object.create(Function.prototype, assign(map(mods, function (mod) {\n\treturn d.gs(function () { return memoized(this, mod); });\n}), memoizeMethods({\n\t// xterm (255) color\n\txterm: d(function (code) {\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);\n\t\treturn defineProperty(getFn(), '_cliColorData',\n\t\t\td(assign({}, this._cliColorData, {\n\t\t\t\t_fg: [xtermMatch ? xtermMatch[code] : ('38;5;' + code), 39]\n\t\t\t})));\n\t}),\n\tbgXterm: d(function (code) {\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);\n\t\treturn defineProperty(getFn(), '_cliColorData',\n\t\t\td(assign({}, this._cliColorData, {\n\t\t\t\t_bg: [xtermMatch ? (xtermMatch[code] + 10) : ('48;5;' + code), 49]\n\t\t\t})));\n\t})\n})));\n\nvar getEndRe = memoize(function (code) {\n\treturn new RegExp('\\x1b\\\\[' + code + 'm', 'g');\n}, { primitive: true });\n\nif (process.platform === 'win32') xtermMatch = require('./lib/xterm-match');\n\ngetFn = function () {\n\treturn setPrototypeOf(function self(/*…msg*/) {\n\t\tvar start = '', end = '', msg = join.call(arguments, ' '), conf = self._cliColorData\n\t\t  , hasAnsi = sgr.hasCSI(msg);\n\t\tforEach(conf, function (mod, key) {\n\t\t\tend    = sgr(mod[1]) + end;\n\t\t\tstart += sgr(mod[0]);\n\t\t\tif (hasAnsi) {\n\t\t\t\tmsg = msg.replace(getEndRe(mod[1]), variantModes[key] ? sgr(mod[0]) : '');\n\t\t\t}\n\t\t}, null, true);\n\t\treturn start + msg + end;\n\t}, proto);\n};\n\nmodule.exports = Object.defineProperties(getFn(), {\n\txtermSupported: d(!xtermMatch),\n\t_cliColorData: d('', {})\n});\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/lib/sgr.js":"'use strict';\n/* CSI - control sequence introducer */\n/* SGR - set graphic rendition */\n\nvar assign   = require('es5-ext/object/assign')\n  , includes = require('es5-ext/string/#/contains')\n  , forOwn   = require('es5-ext/object/for-each')\n  , onlyKey  = require('es5-ext/object/first-key')\n  , forEachRight = require('es5-ext/array/#/for-each-right')\n  , uniq = require('es5-ext/array/#/uniq.js');\n\nvar CSI = '\\x1b[';\n\nvar sgr = function (code) {\n\treturn CSI + code + 'm';\n};\n\nsgr.CSI = CSI;\n\nvar mods = assign({\n\t// Style\n\tbold:      { _bold: [1, 22] },\n\titalic:    { _italic: [3, 23] },\n\tunderline: { _underline: [4, 24] },\n\tblink:     { _blink: [5, 25] },\n\tinverse:   { _inverse: [7, 27] },\n\tstrike:    { _strike: [9, 29] }\n\n\t// Color\n}, ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']\n\t.reduce(function (obj, color, index) {\n\t\t// foreground\n\t\tobj[color] = { _fg: [30 + index, 39] };\n\t\tobj[color + 'Bright'] = { _fg: [90 + index, 39] };\n\n\t\t// background\n\t\tobj['bg' + color[0].toUpperCase() + color.slice(1)] = { _bg: [40 + index, 49] };\n\t\tobj['bg' + color[0].toUpperCase() + color.slice(1) + 'Bright'] = { _bg: [100 + index, 49] };\n\n\t\treturn obj;\n\t}, {}));\n\nsgr.mods = mods;\n\nsgr.openers = {};\nsgr.closers = {};\n\nforOwn(mods, function (mod) {\n\tvar modPair = mod[onlyKey(mod)];\n\n\tsgr.openers[modPair[0]] = modPair;\n\tsgr.closers[modPair[1]] = modPair;\n});\n\nsgr.openStyle = function (mods, code) {\n\tmods.push(sgr.openers[code]);\n};\n\nsgr.closeStyle = function (mods, code) {\n\tforEachRight.call(mods, function (modPair, index) {\n\t\tif (modPair[1] === code) {\n\t\t\tmods.splice(index, 1);\n\t\t}\n\t});\n};\n\n/* prepend openers */\nsgr.prepend = function (mods) {\n\treturn mods.map(function (modPair, key) {\n\t\treturn sgr(modPair[0]);\n\t});\n};\n\n/* complete non-closed openers with corresponding closers */\nsgr.complete = function (mods, closerCodes) {\n\tcloserCodes.forEach(function (code) {\n\t\tsgr.closeStyle(mods, code);\n\t});\n\n\t// mods must be closed from the last opened to first opened\n\tmods = mods.reverse();\n\n\tmods = mods.map(function (modPair, key) {\n\t\treturn modPair[1];\n\t});\n\n\t// one closer can close many openers (31, 32 -> 39)\n\tmods = uniq.call(mods);\n\n\treturn mods.map(sgr);\n};\n\nvar hasCSI = function (str) {\n\treturn includes.call(str, CSI);\n};\n\nsgr.hasCSI = hasCSI;\n\nvar extractCode = function (csi) {\n\tvar code = csi.slice(2, -1);\n\tcode = Number(code);\n\treturn code;\n};\n\nsgr.extractCode = extractCode;\n\nmodule.exports = sgr;\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/window-size.js":"'use strict';\n\nvar d = require('d');\n\nObject.defineProperties(exports, {\n\twidth: d.gs('ce', function () { return process.stdout.columns || 0; }),\n\theight: d.gs('ce', function () { return process.stdout.rows || 0; })\n});\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/erase.js":"'use strict';\n\nmodule.exports = {\n\tscreen: '\\x1b[2J',\n\tscreenLeft: '\\x1b[1J',\n\tscreenRight: '\\x1b[J',\n\tline: '\\x1b[2K',\n\tlineLeft: '\\x1b[1K',\n\tlineRight: '\\x1b[K'\n};\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/move.js":"'use strict';\n\nvar d     = require('d')\n  , trunc = require('es5-ext/math/trunc')\n\n  , up, down, right, left\n  , abs = Math.abs, floor = Math.floor, max = Math.max;\n\nvar getMove = function (control) {\n\treturn function (num) {\n\t\tnum = isNaN(num) ? 0 : max(floor(num), 0);\n\t\treturn num ? ('\\x1b[' + num + control) : '';\n\t};\n};\nmodule.exports = Object.defineProperties(function (x, y) {\n\tx = isNaN(x) ? 0 : floor(x);\n\ty = isNaN(y) ? 0 : floor(y);\n\treturn ((x > 0) ? right(x) : left(-x)) + ((y > 0) ? down(y) : up(-y));\n}, {\n\tup: d(up = getMove('A')),\n\tdown: d(down = getMove('B')),\n\tright: d(right = getMove('C')),\n\tleft: d(left = getMove('D')),\n\tto: d(function (x, y) {\n\t\tx = isNaN(x) ? 1 : (max(floor(x), 0) + 1);\n\t\ty = isNaN(y) ? 1 : (max(floor(y), 0) + 1);\n\t\treturn '\\x1b[' + y + ';' + x + 'H';\n\t}),\n\tlines: d(function (n) {\n\t\tvar dir;\n\t\tn = trunc(n) || 0;\n\t\tdir = (n >= 0) ? 'E' : 'F';\n\t\tn = floor(abs(n));\n\t\treturn '\\x1b[' + n + dir;\n\t})\n});\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/beep.js":"'use strict';\n\nmodule.exports = '\\x07';\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/columns.js":"'use strict';\n\nvar from              = require('es5-ext/array/from')\n  , iterable          = require('es5-ext/iterable/validate-object')\n  , stringifiable     = require('es5-ext/object/validate-stringifiable')\n  , repeat            = require('es5-ext/string/#/repeat')\n  , getStrippedLength = require('./get-stripped-length');\n\nmodule.exports = function (rows/*, options*/) {\n\tvar options = Object(arguments[1]), cols = []\n\t  , colsOptions = options.columns || [];\n\treturn from(iterable(rows), function (row, index) {\n\t\treturn from(iterable(row), function (str, index) {\n\t\t\tvar col = cols[index], strLength;\n\t\t\tif (!col) col = cols[index] = { width: 0 };\n\t\t\tstr = stringifiable(str);\n\t\t\tstrLength = getStrippedLength(str);\n\t\t\tif (strLength > col.width) col.width = strLength;\n\t\t\treturn { str: str, length: strLength };\n\t\t});\n\t}).map(function (row) {\n\t\treturn row.map(function (item, index) {\n\t\t\tvar pad, align = 'left', colOptions = colsOptions && colsOptions[index];\n\t\t\talign = (colOptions && (colOptions.align === 'right')) ? 'right' : 'left';\n\t\t\tpad = repeat.call(' ', cols[index].width - item.length);\n\t\t\tif (align === 'left') return item.str + pad;\n\t\t\treturn pad + item.str;\n\t\t}).join((options.sep == null) ? ' | ' : options.sep);\n\t}).join('\\n') + '\\n';\n};\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/get-stripped-length.js":"'use strict';\n/*\n * get actual length of ANSI-formatted string\n */\n\nvar strip = require('./strip');\n\nmodule.exports = function (str) {\n\treturn strip(str).length;\n};\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/strip.js":"// Strip ANSI formatting from string\n\n'use strict';\n\nvar stringifiable = require('es5-ext/object/validate-stringifiable')\n  , r             = require('ansi-regex')();\n\nmodule.exports = function (str) { return stringifiable(str).replace(r, ''); };\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/slice.js":"'use strict';\n\nvar reAnsi        = require('ansi-regex')\n  , stringifiable = require('es5-ext/object/validate-stringifiable-value')\n  , length        = require('./get-stripped-length')\n  , sgr           = require('./lib/sgr')\n\n  , max = Math.max;\n\nvar Token = function Token(token) {\n\tthis.token = token;\n};\n\nvar tokenize = function (str) {\n\tvar match = reAnsi().exec(str);\n\n\tif (!match) {\n\t\treturn [ str ];\n\t}\n\n\tvar index = match.index\n\t  , head, prehead, tail;\n\n\tif (index === 0) {\n\t\thead = match[0];\n\t\ttail = str.slice(head.length);\n\n\t\treturn [ new Token(head) ].concat(tokenize(tail));\n\t}\n\n\tprehead = str.slice(0, index);\n\thead = match[0];\n\ttail = str.slice(index + head.length);\n\n\treturn [ prehead, new Token(head) ].concat(tokenize(tail));\n};\n\nvar isChunkInSlice = function (chunk, index, begin, end) {\n\tvar endIndex = chunk.length + index;\n\n\tif (begin > endIndex) return false;\n\tif (end < index) return false;\n\treturn true;\n};\n\nvar sliceSeq = function (seq, begin, end) {\n\tvar sliced = seq.reduce(function (state, chunk) {\n\t\tvar index = state.index;\n\n\t\tif (!(chunk instanceof Token)) {\n\t\t\tvar nextChunk = '';\n\n\t\t\tif (isChunkInSlice(chunk, index, begin, end)) {\n\t\t\t\tvar relBegin = Math.max(begin - index, 0)\n\t\t\t\t  , relEnd   = Math.min(end - index, chunk.length);\n\n\t\t\t\tnextChunk = chunk.slice(relBegin, relEnd);\n\t\t\t}\n\n\t\t\tstate.seq.push(nextChunk);\n\t\t\tstate.index = index + chunk.length;\n\t\t} else {\n\t\t\tvar code = sgr.extractCode(chunk.token);\n\n\t\t\tif (index <= begin) {\n\t\t\t\tif (code in sgr.openers) {\n\t\t\t\t\tsgr.openStyle(state.preOpeners, code);\n\t\t\t\t}\n\t\t\t\tif (code in sgr.closers) {\n\t\t\t\t\tsgr.closeStyle(state.preOpeners, code);\n\t\t\t\t}\n\t\t\t} else if (index < end) {\n\t\t\t\tif (code in sgr.openers) {\n\t\t\t\t\tsgr.openStyle(state.inOpeners, code);\n\t\t\t\t\tstate.seq.push(chunk);\n\t\t\t\t} else if (code in sgr.closers) {\n\t\t\t\t\tstate.inClosers.push(code);\n\t\t\t\t\tstate.seq.push(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}, {\n\t\tindex: 0,\n\t\tseq: [],\n\n\t\t// preOpeners -> [ mod ]\n\t\t// preOpeners must be prepended to the slice if they wasn't closed til the end of it\n\t\t// preOpeners must be closed if they wasn't closed til the end of the slice\n\t\tpreOpeners: [],\n\n\t\t// inOpeners  -> [ mod ]\n\t\t// inOpeners already in the slice and must not be prepended to the slice\n\t\t// inOpeners must be closed if they wasn't closed til the end of the slice\n\t\tinOpeners:  [], // opener CSI inside slice\n\n\t\t// inClosers -> [ code ]\n\t\t// closer CSIs for determining which pre/in-Openers must be closed\n\t\tinClosers:  []\n\t});\n\n\tsliced.seq = [].concat(\n\t\tsgr.prepend(sliced.preOpeners),\n\t\tsliced.seq,\n\t\tsgr.complete([].concat(sliced.preOpeners, sliced.inOpeners), sliced.inClosers)\n\t);\n\n\treturn sliced.seq;\n};\n\nmodule.exports = function (str/*, begin, end*/) {\n\tvar seq, begin = Number(arguments[1]), end = Number(arguments[2]), len;\n\n\tstr = stringifiable(str);\n\tlen = length(str);\n\n\tif (isNaN(begin)) {\n\t\tbegin = 0;\n\t}\n\tif (isNaN(end)) {\n\t\tend = len;\n\t}\n\tif (begin < 0) {\n\t\tbegin = max(len + begin, 0);\n\t}\n\tif (end < 0) {\n\t\tend = max(len + end, 0);\n\t}\n\n\tseq = tokenize(str);\n\tseq = sliceSeq(seq, begin, end);\n\treturn seq.map(function (chunk) {\n\t\tif (chunk instanceof Token) {\n\t\t\treturn chunk.token;\n\t\t}\n\n\t\treturn chunk;\n\t}).join('');\n};\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/throbber.js":"'use strict';\n\nvar compose      = require('es5-ext/function/#/compose')\n  , callable     = require('es5-ext/object/valid-callable')\n  , d            = require('d')\n  , validTimeout = require('timers-ext/valid-timeout')\n\n  , chars = '-\\\\|/', l = chars.length, ThrobberIterator;\n\nThrobberIterator = function () {};\nObject.defineProperties(ThrobberIterator.prototype, {\n\tindex: d(-1),\n\trunning: d(false),\n\tnext: d(function () {\n\t\tvar str = this.running ? '\\u0008' : '';\n\t\tif (!this.running) this.running = true;\n\t\treturn str + chars[this.index = ((this.index + 1) % l)];\n\t}),\n\treset: d(function () {\n\t\tif (!this.running) return '';\n\t\tthis.index = -1;\n\t\tthis.running = false;\n\t\treturn '\\u0008';\n\t})\n});\n\nmodule.exports = exports = function (write, interval/*, format*/) {\n\tvar format = arguments[2], token, iterator = new ThrobberIterator();\n\tcallable(write);\n\tinterval = validTimeout(interval);\n\tif (format !== undefined) write = compose.call(write, callable(format));\n\treturn {\n\t\tstart: function () {\n\t\t\tif (token) return;\n\t\t\ttoken = setInterval(function () { write(iterator.next()); }, interval);\n\t\t},\n\t\trestart: function () {\n\t\t\tthis.stop();\n\t\t\tthis.start();\n\t\t},\n\t\tstop: function () {\n\t\t\tif (!token) return;\n\t\t\tclearInterval(token);\n\t\t\ttoken = null;\n\t\t\twrite(iterator.reset());\n\t\t}\n\t};\n};\n\nObject.defineProperty(exports, 'Iterator', d(ThrobberIterator));\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/reset.js":"'use strict';\n\nmodule.exports = '\\x1b[2J\\x1b[0;0H';\n","/home/travis/build/npmtest/node-npmtest-cli-color/cli-color/art.js":"'use strict';\n\nvar object        = require('es5-ext/object/valid-object')\n  , stringifiable = require('es5-ext/object/validate-stringifiable-value')\n  , forOf         = require('es6-iterator/for-of');\n\nmodule.exports = function (text, style) {\n\tvar result = '';\n\ttext = stringifiable(text);\n\tobject(style);\n\tforOf(text, function (char) { result += style[char] || char; });\n\treturn result;\n};\n"}